version: 2.1

# https://support.circleci.com/hc/en-us/articles/360041503393-A-workaround-to-trigger-a-single-job-with-2-1-config
parameters:
  build-and-push-docker-images:
    type: boolean
    default: false

install-python-components: &install-python-components
  name: Install FEniCS Python components
  command: |
    pip3 install git+https://github.com/FEniCS/fiat.git --upgrade
    pip3 install git+https://github.com/FEniCS/ufl.git --upgrade
    pip3 install git+https://github.com/FEniCS/ffcx.git --upgrade
    rm -rf /usr/local/include/dolfin /usr/local/include/dolfin.h

flake8-python-code: &flake8-python-code
  name: Flake8 checks on Python code
  command: |
    python3 -m flake8 python/dolfin
    python3 -m flake8 python/dolfin_utils
    python3 -m flake8 python/demo
    python3 -m flake8 python/test

build-documentation-cpp: &build-documentation-cpp
  name: Build documentation (C++)
  command: cd cpp/doc && doxygen

configure-cpp: &configure-cpp
  name: Configure (C++)
  command: mkdir -p build && cd build && cmake -G Ninja -DCMAKE_BUILD_TYPE=Developer ../cpp/

build-install-cpp: &build-install-cpp
  name: Build and install (C++)
  command: cd build && ninja -j3 install

unit-tests-cpp: &unit-tests-cpp
  name: Build and run C++ unit tests (serial and MPI)
  command: |
    cd build
    ninja -j3 unittests
    ctest --output-on-failure -R unittests
    mpirun -np 3 ctest --output-on-failure -R unittests

regression-tests-cpp: &regression-tests-cpp
  name: Build and run C++ regressions tests (serial)
  command: |
    cd build
    ninja -j3 demos
    ctest -j3 -R demo -R serial

regression-tests-cpp-mpi: &regression-tests-cpp-mpi
  name: Run C++ regression tests (MPI)
  command: |
    cd build
    ninja -j3 demos
    ctest --verbose -R demo -R mpi

build-python-interface: &build-python-interface
  name: Build Python/pybind11 interface
  command: |
    cd python
    pip3 -v install . --user

build-documentation-python: &build-documentation-python
  name: Build documentation (Python)
  command: |
    cd python/demo && python3 ./generate-demo-files.py
    cd ../doc && make html

unit-tests-python: &unit-tests-python
  name: Run unit tests (Python, serial)
  environment:
    DOLFINX_JIT_CFLAGS: -g0 -O0
  command: |
    mkdir -p ~/junit
    cd python/test/unit
    python3 -m pytest -n=4 --durations=50 --junitxml=~/junit/test-results.xml .

unit-tests-python-mpi: &unit-tests-python-mpi
  name: Run unit tests (Python, MPI)
  environment:
    DOLFINX_JIT_CFLAGS: -g0 -O0
  command: |
    cd python/test/unit
    mpirun -np 3 python3 -m pytest .

demos-python: &demos-python
  name: Run demos (Python, serial)
  environment:
    DOLFINX_JIT_CFLAGS: -g0 -O2
  command: |
    mkdir -p ~/junit
    cd python/demo
    python3 ./generate-demo-files.py
    python3 -m pytest -n=4 -v -m serial --durations=10 --junitxml=~/junit/demo-results.xml test.py

demos-python-mpi: &demos-python-mpi
  name: Run demos (Python, MPI)
  environment:
    DOLFINX_JIT_CFLAGS: -g0 -O2
  command: |
    cd python/demo
    python3 ./generate-demo-files.py
    python3 -m pytest -n=2 -v -m mpi test.py --num-proc=3

commands:
  build-and-push-target:
    description: "Build and push target in docker/`dockerfile`"
    parameters:
      docker-target:
        type: string
      dockerfile:
        type: string
        default: "Dockerfile"
      extra-args:
        type: string
        default: ""
    steps:
      - run: >
          cd docker &&
          sudo DOCKER_CLI_EXPERIMENTAL=enabled docker buildx build --cache-to=type=inline,mode=all
          --progress plain
          --build-arg MAKEFLAGS='-j3'
          --build-arg PETSC_SLEPC_OPTFLAGS='-O3'
          --target << parameters.docker-target >>
          --file << parameters.dockerfile >> << parameters.extra-args >>
          --tag quay.io/fenicsproject/dolfinx:<< parameters.docker-target >> . &&
          sudo docker push quay.io/fenicsproject/dolfinx:<< parameters.docker-target >>

jobs:
  build-real:
    docker:
      - image: quay.io/fenicsproject/dolfinx:dev-env-real
    environment:
      MPLBACKEND: "agg"
      DEBIAN_FRONTEND: "noninteractive"
    steps:
      - checkout
      - run: *install-python-components
      - run: *flake8-python-code
      - run: *build-documentation-cpp
      - run: *configure-cpp
      - run: *build-install-cpp

      - run: *unit-tests-cpp
      - run: *regression-tests-cpp
      - run: *regression-tests-cpp-mpi

      - run: *build-python-interface
      - run: *build-documentation-python

      - run: *unit-tests-python
      - run: *unit-tests-python-mpi
      - run: *demos-python
      - run: *demos-python-mpi
      - persist_to_workspace:
          root: .
          paths:
            - python/doc/build/html/
            - cpp/doc/html/
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit

  build-complex:
    docker:
      - image: quay.io/fenicsproject/dolfinx:dev-env-complex
    environment:
      MPLBACKEND: "agg"
      DEBIAN_FRONTEND: "noninteractive"
    steps:
      - checkout
      - run: *install-python-components
      - run: *flake8-python-code
      - run: *build-documentation-cpp
      - run: *configure-cpp
      - run: *build-install-cpp

      - run: *unit-tests-cpp
      - run: *regression-tests-cpp
      - run: *regression-tests-cpp-mpi

      - run: *build-python-interface
      - run: *build-documentation-python
      - run: *unit-tests-python
      - run: *unit-tests-python-mpi
      - run: *demos-python
      - run: *demos-python-mpi
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit

  pushdoc:
    docker:
      - image: circleci/python
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Establish authenticity of fenicsproject.org
          command: mkdir ~/.ssh && echo "fenicsproject.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFbD134YcxSNaHVyio0XPAvJYh8SF90xp/ARqfrbAwOmJaEPTl5CNXm6f3+Sy0k1QTp+j9WawiJON+4/FWQBTD4=" >> ~/.ssh/known_hosts
      - run:
          name: Push Python API doc to fenicsproject.org
          command: cd /tmp/python/doc/build/html && scp -r * docs@fenicsproject.org:/var/www/vhosts/fenicsproject.org/docs/dolfinx/dev/python/
      - run:
          name: Push C++ API doc to fenicsproject.org
          command: cd /tmp/cpp/doc/html && scp -r * docs@fenicsproject.org:/var/www/vhosts/fenicsproject.org/docs/dolfinx/dev/cpp/

  build-and-push-complete-build-docker-images:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Update Docker
          command: |
            sudo apt-get -y remove docker docker-engine docker.io containerd runc
            sudo apt-get -y update
            sudo apt-get -y install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository -y "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get -y install docker-ce docker-ce-cli containerd.io
            sudo docker run hello-world
      - run:
          name: Login to quay.io
          command: echo ${QUAYIO_TOKEN} | sudo docker login -u ${QUAYIO_USERNAME} --password-stdin quay.io
      - build-and-push-target:
          docker-target: "base"
      - build-and-push-target:
          docker-target: "dev-env-real"
      - build-and-push-target:
          docker-target: "dev-env-complex"
      - build-and-push-target:
          docker-target: "real-onbuild"
      - build-and-push-target:
          docker-target: "complex-onbuild"
      - build-and-push-target:
          docker-target: "real"
      - build-and-push-target:
          docker-target: "complex"
      - build-and-push-target:
          docker-target: "notebook"
      - build-and-push-target:
          docker-target: "notebook-complex"
      - build-and-push-target:
          docker-target: "lab"
      - build-and-push-target:
          docker-target: "lab-complex"

workflows:
  build-and-pushdoc:
    unless: << pipeline.parameters.build-and-push-docker-images >>
    jobs:
      - build-real
      - build-complex
      - pushdoc:
          requires:
            - build-real
          filters:
            branches:
              only:
                - master

  nightly:
    triggers:
      - schedule:
          cron: "0 1 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build-and-push-complete-build-docker-images:
          context: quay.io

  build-and-push-docker-images:
    when: << pipeline.parameters.build-and-push-docker-images >>
    jobs:
      - build-and-push-complete-build-docker-images:
          filters:
            branches:
              only:
                - master
          context: quay.io
