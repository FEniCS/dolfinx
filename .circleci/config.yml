version: 2.1

install-python-components: &install-python-components
  name: Install FEniCS Python components
  command: |
    git clone https://github.com/FEniCS/basix.git --branch main --single-branch
    cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -B build-dir -S ./basix/cpp
    cmake --build build-dir --parallel 3
    cmake --install build-dir
    pip3 install ./basix/python
    pip3 install git+https://github.com/FEniCS/ufl.git
    pip3 install git+https://github.com/FEniCS/ffcx.git

ruff-isort-python-code: &ruff-isort-python-code
  name: ruff checks on Python code
  command: |
    cd python/
    ruff check .
    ruff format --check .

configure-cpp: &configure-cpp
  name: Configure (C++)
  command: mkdir -p build && cd build && cmake -G Ninja -DCMAKE_BUILD_TYPE=Developer ../cpp/

build-install-cpp: &build-install-cpp
  name: Build and install (C++)
  command: cd build && ninja -j3 install

unit-tests-cpp: &unit-tests-cpp
  name: Build and run C++ unit tests (serial and MPI)
  command: |
    cmake -G Ninja -DCMAKE_BUILD_TYPE=Developer -B build/test/ -S cpp/test/
    cmake --build build/test
    cd build/test
    ctest --output-on-failure -R unittests
    mpirun -np 3 ctest --output-on-failure -R unittests

regression-tests-cpp: &regression-tests-cpp
  name: Build and run C++ regressions tests (serial)
  command: |
    cmake -G Ninja -DCMAKE_BUILD_TYPE=Developer -B build/demo/ -S cpp/demo/
    cmake --build build/demo
    cd build/demo
    ctest -j3 -R demo -R serial

regression-tests-cpp-mpi: &regression-tests-cpp-mpi
  name: Run C++ regression tests (MPI)
  command: |
    cd build/demo
    ctest --verbose -R demo -R mpi_3

build-python-interface: &build-python-interface
  name: Build Python/nanobind interface
  command: |
    export CMAKE_BUILD_PARALLEL_LEVEL=2
    cd python
    pip3 install -r build-requirements.txt
    pip3 -v install --config-setting cmake.build-type=Debug --no-build-isolation --user .

demos-python: &demos-python
  name: Run demos (Python, serial)
  command: |
    mkdir -p ~/junit
    cd python/demo
    python3 -m pytest -n=4 -v -m serial --durations=10 --junitxml=~/junit/demo-results.xml test.py

demos-python-mpi: &demos-python-mpi
  name: Run demos (Python, MPI)
  command: |
    cd python/demo
    python3 -m pytest -n=2 -v -m mpi test.py --num-proc=3

set-jit-defaults: &set-jit-defaults
  name: Set default DOLFINx JIT options
  command: |
    mkdir -p ~/.config/dolfinx
    echo '{ "cffi_extra_compile_args" : ["-g0", "-O0" ] }' > ~/.config/dolfinx/dolfinx_jit_options.json

unit-tests-python: &unit-tests-python
  name: Run unit tests (Python, serial)
  command: |
    mkdir -p ~/junit
    cd python/test
    python3 -m pytest -n=4 --durations=50 --junitxml=~/junit/test-results.xml unit/

unit-tests-python-mpi: &unit-tests-python-mpi
  name: Run unit tests (Python, MPI)
  command: |
    cd python/test
    mpirun -np 3 python3 -m pytest unit/

jobs:
  build-real:
    docker:
      - image: ghcr.io/fenics/test-env:current-mpich
    environment:
      DEBIAN_FRONTEND: "noninteractive"
      PETSC_ARCH: "linux-gnu-real64-32"
      CMAKE_BUILD_PARALLEL_LEVEL: "3"
    steps:
      - checkout
      - run: *install-python-components
      - run: *ruff-isort-python-code
      - run: *configure-cpp
      - run: *build-install-cpp

      - run: *unit-tests-cpp
      - run: *regression-tests-cpp
      - run: *regression-tests-cpp-mpi

      - run: *build-python-interface

      - run: *demos-python
      - run: *demos-python-mpi
      - run: *set-jit-defaults
      - run: *unit-tests-python
      - run: *unit-tests-python-mpi
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit

  build-complex:
    docker:
      - image: ghcr.io/fenics/test-env:current-mpich
    environment:
      DEBIAN_FRONTEND: "noninteractive"
      PETSC_ARCH: "linux-gnu-complex128-32"
      CMAKE_BUILD_PARALLEL_LEVEL: "3"
    steps:
      - checkout
      - run: *install-python-components
      - run: *ruff-isort-python-code
      - run: *configure-cpp
      - run: *build-install-cpp

      - run: *unit-tests-cpp
      - run: *regression-tests-cpp
      - run: *regression-tests-cpp-mpi

      - run: *build-python-interface

      - run: *demos-python
      - run: *demos-python-mpi
      - run: *set-jit-defaults
      - run: *unit-tests-python
      - run: *unit-tests-python-mpi
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit

workflows:
  version: 2
  build:
    jobs:
      - build-real
      - build-complex
