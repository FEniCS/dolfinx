version: 2
jobs:
  build:
    docker:
      - image: quay.io/fenicsproject/dolfinx:latest
    environment:
      MPLBACKEND: "agg"
      DOLFIN_NOPLOT: 1
      DEBIAN_FRONTEND: "noninteractive"
    steps:
      - checkout
      - run:
          name: Install/update Python (test/doc) dependencies
          command: pip3 install decorator flake8 matplotlib numba pygmsh pytest pytest-xdist sphinx sphinx_rtd_theme --upgrade
      - run:
          name: Install FEniCS Python components
          command: |
            pip3 uninstall --yes fenics-fiat fenics-ufl fenics-dijitso fenics-ffc
            pip3 install git+https://bitbucket.org/fenics-project/fiat.git --upgrade
            pip3 install git+https://bitbucket.org/fenics-project/ufl.git --upgrade
            pip3 install git+https://bitbucket.org/fenics-project/dijitso.git --upgrade
            pip3 install git+https://github.com/fenics/ffcx.git --upgrade
            rm -rf /usr/local/include/dolfin /usr/local/include/dolfin.h
      - run:
          name: Flake8 checks on Python code
          command: python3 -m flake8 python/dolfin

      - run:
          name: Build DOLFIN C++ documentation
          command: cd cpp/doc && doxygen
      - run:
          name: Configure DOLFIN (C++)
          command: mkdir -p build && cd build && cmake -G Ninja -DCMAKE_BUILD_TYPE=Developer ../cpp/
      - run:
          name: Build DOLFIN and install (C++)
          command: cd build && ninja -j3 install
      - run:
          name: Build and run C++ unit tests (serial)
          command: cd build && ninja -j3 unittests && ctest -R unittests
      #- run:
      #    name: Build and run C++ regressions tests (serial)
      #    command: cd build && make -j2 demos && ctest -j2 -R demo -R serial
      #- run:
      #    name: Run C++ regression tests (MPI)
      #    command: cd build && make -j2 demos && ctest -R demo -R mpi

      - run:
          name: Build and run C++ demos
          command: |
            cd cpp/demo/documented/poisson
            python3 -m ffc -l dolfin Poisson.ufl
            cmake -G Ninja .
            ninja
            ./demo_poisson

      - run:
          name: Build Python interface
          command: |
            cd python
            pip3 -v install . --user

      - run:
          name: Build DOLFIN Python documentation
          command: |
            cd python/demo && python3 ./generate-demo-files.py
            cd ../doc && make html
      - persist_to_workspace:
          root: .
          paths:
            - python/doc/build/html/
            - cpp/doc/html/

      - run:
          name: Run flake8 on Python unit tests
          command: |
            cd python/test/unit
            python3 -m flake8 .
      - run:
          name: Run Python unit tests (serial)
          command: |
            cd python/test/unit
            python3 -m pytest -n 3 .
      - run:
          name: Run Python unit tests (MPI)
          command: |
            cd python/test/unit
            mpirun --allow-run-as-root -n 3 python3 -m pytest .
      - run:
          name: Run Python demos (serial)
          command: |
            cd python/demo
            python3 ./generate-demo-files.py
            python3 undocumented/elasticity/demo_elasticity.py
            python3 documented/poisson/demo_poisson.py
            cd documented/stokes-taylor-hood
            python3 demo_stokes-taylor-hood.py

      - run:
          name: Run Python demos (MPI)
          command: |
            cd python/demo
            mpirun --allow-run-as-root -np 3 python3 documented/poisson/demo_poisson.py
            mpirun --allow-run-as-root -np 3 python3 undocumented/elasticity/demo_elasticity.py
            cd documented/stokes-taylor-hood
            mpirun --allow-run-as-root -np 3 python3 demo_stokes-taylor-hood.py

      #- run:
      #    name: Run Python unit tests (serial)
      #    command: python3 -m pytest -n 2 python/test/unit/
      #- run:
      #    name: Run Python unit tests (MPI)
      #    command: mpirun -n 3 python3 -m pytest python/test/unit/
      #- run:
      #    name: Generate Python demo (regression) programs
      #    command: python3 python/demo/generate-demo-files.py
      #- run:
      #    name: Run Python regression tests (serial)
      #    command: python3 -m pytest -v -n2 python/demo/test.py
      #- run:
      #    name: Run Python regression tests (MPI)
      #    command: python3 -m pytest -v python/demo/test.py --mpiexec=mpiexec --num-proc=3

  pushdoc:
    docker:
      - image: circleci/python
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Establish authenticity of fenicsproject.org
          command: mkdir ~/.ssh && echo "fenicsproject.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFbD134YcxSNaHVyio0XPAvJYh8SF90xp/ARqfrbAwOmJaEPTl5CNXm6f3+Sy0k1QTp+j9WawiJON+4/FWQBTD4=" >> ~/.ssh/known_hosts
      - run:
          name: Push Python API doc to fenicsproject.org
          command: cd /tmp/python/doc/build/html && scp -r * docs@fenicsproject.org:/var/www/vhosts/fenicsproject.org/docs/dolfinx/dev/python/
      - run:
          name: Push C++ API doc to fenicsproject.org
          command: cd /tmp/cpp/doc/html && scp -r * docs@fenicsproject.org:/var/www/vhosts/fenicsproject.org/docs/dolfinx/dev/cpp/

workflows:
  version: 2
  build-and-pushdoc:
    jobs:
      - build
      - pushdoc:
          requires:
            - build
          filters:
            branches:
              only:
                - master
