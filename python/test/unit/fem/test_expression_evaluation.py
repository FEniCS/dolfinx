# Copyright (C) 2019 Michal Habera
#
# This file is part of DOLFINX (https://www.fenicsproject.org)
#
# SPDX-License-Identifier:    LGPL-3.0-or-later


import cffi
import numba
import numpy as np
from mpi4py import MPI
from petsc4py import PETSc

import ufl
import dolfinx


def test_simple_evaluation():
    """Test evaluation of UFL expression.

    This test evaluates a UFL Expression on two cells in the mesh and compares the
    result with an analytical expression.

    For a donor function f(x, y) = 2*(x^2 + 2*y^2) result is compared with the
    exact gradient grad f(x, y) = 2*[2*x, 4*y]. In this test, f(x, y) is first
    interpolated into a P2 finite element space. The constant scaling 2 is
    implemented using Constant. Internally, the gradient of f is evaluated
    using code generated by FFCX.
    """
    mesh = dolfinx.generation.UnitSquareMesh(MPI.COMM_WORLD, 5, 5)
    P2 = dolfinx.FunctionSpace(mesh, ("P", 2))
    vP1 = dolfinx.VectorFunctionSpace(mesh, ("P", 1))

    f = dolfinx.Function(P2)

    def expr1(x):
        return 2*(x[0] ** 2 + 2.0 * x[1] ** 2)

    def grad_expr1(x):
        return 2*[2*x, 4*y]

    f.interpolate(expr1)

    ufl_expr = ufl.grad(dolfinx.Constant(mesh, 2.0)*f)
    points = np.array([[0.3, 0.2, 0.0], [0.5, 0.5, 0.0], [0.2, 0.3, 0.0]])
    expr = dolfinx.Expression(ufl_expr, points)

    cells = np.array([1, 2], dtype=np.int32)
    expr.eval(cells)
