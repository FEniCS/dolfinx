name: Docker images

# Builds all images nightly. Uses cache to avoid when possible building
# expensive development images. Can also be called with specific git
# refs for all FEniCS components to produce tagged images.
#
# Can also be triggered manually via GitHub interface using specific
# git refs and tag prefix for e.g. releases.

on:
  schedule:
    # '*' is a special character in YAML, so string must be quoted
    - cron: "0 1 * * *"
  workflow_dispatch:
    inputs:
      tag_prefix:
        description: "tag prefix for docker images"
        default: "latest"
        type: string

      dolfinx_ref:
        description: "dolfinx git ref to checkout"
        default: "main"
        type: string

      basix_ref:
        description: "basix git ref to checkout"
        default: "main"
        type: string

      ufl_ref:
        description: "ufl git ref to checkout"
        default: "main"
        type: string

      ffcx_ref:
        description: "ffcx git ref to checkout"
        default: "main"
        type: string 

jobs:
  start_runner:
    name: Start self-hosted EC2 runner
    if: ${{ github.repository == 'FEniCS/dolfinx' }}
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2.3.2
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ami-07529ef40e2c81086
          ec2-instance-type: c6g.large
          subnet-id: subnet-dc2151b7
          security-group-id: sg-03fc69ee7a6ba8bc4

  build_test_env_openmpi:
    name: Build fenicsproject/test-env:openmpi image
    if: ${{ github.repository == 'FEniCS/dolfinx' }}
    strategy:
      fail-fast: False
      matrix:
        include:
          - arch_tag: amd64
            os: ubuntu-latest
          - arch_tag: arm64
            os: ARM64
    runs-on: ${{ matrix.os }}
    needs: start_runner
    env:
      PETSC_SLEPC_OPTFLAGS: "-O2 -g"
      PETSC_SLEPC_DEBUGGING: "yes"
      MPI: "openmpi"
      DOCKER_BUILD_ARGS: "--build-arg PETSC_SLEPC_OPTFLAGS --build-arg PETSC_SLEPC_DEBUGGING --build-arg MPI"
      ARCH_TAG: ${{ matrix.arch_tag }}
    steps:
      - uses: actions/checkout@v3
      - name: Get tag name
        id: tag_name
        run: |
          USER_INPUT=${{ github.event.inputs.tag_prefix }}
          echo "::set-output name=TAG_PREFIX::${USER_INPUT:-latest}"
      - name: Log into the Dockerhub registry
        run: echo ${{ secrets.dockerhub_token }} | docker login -u ${{ secrets.dockerhub_username }} --password-stdin
      - name: Build the Docker image
        run: docker buildx build ${DOCKER_BUILD_ARGS} --push --cache-from=type=registry,ref=fenicsproject/test-env:${{ steps.tag_name.outputs.TAG_PREFIX }}-${MPI}-${ARCH_TAG} --cache-to=type=inline --file docker/Dockerfile --target dev-env --tag fenicsproject/test-env:${{ steps.tag_name.outputs.TAG_PREFIX }}-${MPI}-${ARCH_TAG} docker/
      - name: Cleanup
        run: docker rmi fenicsproject/test-env:${{ steps.tag_name.outputs.TAG_PREFIX }}-${MPI}-${ARCH_TAG}

  build_test_env_mpich:
    name: Build fenicsproject/test-env:mpich image
    if: ${{ github.repository == 'FEniCS/dolfinx' }}
    strategy:
      fail-fast: False
      matrix:
        include:
          - arch_tag: amd64
            os: ubuntu-latest
          - arch_tag: arm64
            os: ARM64
    runs-on: ${{ matrix.os }}
    needs: start_runner
    env:
      PETSC_SLEPC_OPTFLAGS: "-O2 -g"
      PETSC_SLEPC_DEBUGGING: "yes"
      MPI: "mpich"
      DOCKER_BUILD_ARGS: "--build-arg PETSC_SLEPC_OPTFLAGS --build-arg PETSC_SLEPC_DEBUGGING --build-arg MPI"
      ARCH_TAG: ${{ matrix.arch_tag }}
    steps:
      - uses: actions/checkout@v3
      - name: Log into the DockerHub registry
        run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Get tag name
        id: tag_name
        run: |
          USER_INPUT=${{ github.event.inputs.tag_prefix }}
          echo "::set-output name=TAG_PREFIX::${USER_INPUT:-latest}"
      - name: Build the Docker image
        run: docker buildx build ${DOCKER_BUILD_ARGS} --push --cache-from=type=registry,ref=fenicsproject/test-env:${{ steps.tag_name.outputs.TAG_PREFIX }}-${MPI}-${ARCH_TAG} --cache-to=type=inline --file docker/Dockerfile --target dev-env --tag fenicsproject/test-env:${{ steps.tag_name.outputs.TAG_PREFIX }}-${MPI}-${ARCH_TAG} docker/
      - name: Cleanup
        run: docker rmi fenicsproject/test-env:${{ steps.tag_name.outputs.TAG_PREFIX }}-${MPI}-${ARCH_TAG}

  build_dev_env:
    name: Build dolfinx/dev-env image
    if: ${{ github.repository == 'FEniCS/dolfinx' }}
    strategy:
      matrix:
        include:
          - arch_tag: amd64
            os: ubuntu-latest
          - arch_tag: arm64
            os: ARM64
    runs-on: ${{ matrix.os }}
    needs: start_runner
    env:
      # TODO: march based on matrix.os
      PETSC_SLEPC_OPTFLAGS: "-O2"
      PETSC_SLEPC_DEBUGGING: "no"
      MPI: "mpich"
      DOCKER_BUILD_ARGS: "--build-arg PETSC_SLEPC_OPTFLAGS --build-arg PETSC_SLEPC_DEBUGGING --build-arg MPI"
      ARCH_TAG: ${{ matrix.arch_tag }}
    steps:
      - uses: actions/checkout@v3
      - name: Get tag name
        id: tag_name
        run: |
          USER_INPUT=${{ github.event.inputs.tag_prefix }}
          echo "::set-output name=TAG_PREFIX::${USER_INPUT:-latest}"
      - name: Log into the DockerHub registry
        run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Build the Docker image
        run: docker buildx build ${DOCKER_BUILD_ARGS} --push --cache-from=type=registry,ref=dolfinx/dev-env:${{ steps.tag_name.outputs.TAG_PREFIX }}-${ARCH_TAG} --cache-to=type=inline --file docker/Dockerfile --target dev-env --tag dolfinx/dev-env:${{ steps.tag_name.outputs.TAG_PREFIX }}-${ARCH_TAG} docker/
      - name: Cleanup
        run: docker rmi dolfinx/dev-env:${{ steps.tag_name.outputs.TAG_PREFIX }}-${ARCH_TAG}

  push_dev_multiarch_images:
    name: Push development multiarch images
    if: ${{ github.repository == 'FEniCS/dolfinx' }}
    runs-on: ubuntu-latest
    needs:
      - build_test_env_openmpi
      - build_test_env_mpich
      - build_dev_env
    steps:
      - name: Get tag name
        id: tag_name
        run: |
          USER_INPUT=${{ github.event.inputs.tag_prefix }}
          echo "::set-output name=TAG_PREFIX::${USER_INPUT:-latest}"
      - name: Log into the DockerHub registry
        run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Push multiarch images
        run: |
          docker buildx imagetools create \
            -t fenicsproject/test-env:${{ steps.tag_name.outputs.TAG_PREFIX }}-mpich \
            fenicsproject/test-env:${{ steps.tag_name.outputs.TAG_PREFIX }}-mpich-amd64 \
            fenicsproject/test-env:${{ steps.tag_name.outputs.TAG_PREFIX }}-mpich-arm64
          docker buildx imagetools create \
            -t fenicsproject/test-env:${{ steps.tag_name.outputs.TAG_PREFIX }}-openmpi \
            fenicsproject/test-env:${{ steps.tag_name.outputs.TAG_PREFIX }}-openmpi-amd64 \
            fenicsproject/test-env:${{ steps.tag_name.outputs.TAG_PREFIX }}-openmpi-arm64
          docker buildx imagetools create \
            -t dolfinx/dev-env:${{ steps.tag_name.outputs.TAG_PREFIX }} \
            dolfinx/dev-env:${{ steps.tag_name.outputs.TAG_PREFIX }}-amd64 \
            dolfinx/dev-env:${{ steps.tag_name.outputs.TAG_PREFIX }}-arm64

  build_end_user_images:
    name: Build DOLFINx end-user images
    if: ${{ github.repository == 'FEniCS/dolfinx' }}
    strategy:
      matrix:
        include:
          - arch_tag: amd64
            os: ubuntu-latest
          - arch_tag: arm64
            os: ARM64
    runs-on: ${{ matrix.os }}
    needs:
      - start_runner
      - push_dev_multiarch_images
    env:
      DOLFINX_CMAKE_BUILD_TYPE: "RelWithDebInfo"
      DOLFINX_CMAKE_CXX_FLAGS: "-O2"
      DOCKER_BUILD_ARGS: "--build-arg DOLFINX_CMAKE_BUILD_TYPE --build-arg DOLFINX_CMAKE_CXX_FLAGS"
      ARCH_TAG: ${{ matrix.arch_tag }}
    steps:
      - name: Get tag name
        id: tag_name
        run: |
          USER_INPUT=${{ github.event.inputs.tag_prefix }}
          echo "::set-output name=TAG_PREFIX::${USER_INPUT:-latest}"
      - name: Get git refs
        id: refs
        run: |
          USER_INPUT=${{ github.event.inputs.dolfinx_ref }}
          echo "::set-output name=DOLFINX_REF::${USER_INPUT:-main}"
          USER_INPUT=${{ github.event.inputs.basix_ref }}
          echo "::set-output name=BASIX_REF::${USER_INPUT:-main}"
          USER_INPUT=${{ github.event.inputs.ufl_ref }}
          echo "::set-output name=UFL_REF::${USER_INPUT:-main}"
          USER_INPUT=${{ github.event.inputs.ffcx_ref }}
          echo "::set-output name=FFCX_REF::${USER_INPUT:-main}"
      - uses: actions/checkout@v3
        with:
          repository: "FEniCS/dolfinx"
          path: "dolfinx"
          ref: ${{ steps.refs.outputs.DOLFINX_REF }}
      - uses: actions/checkout@v3
        with:
          repository: "FEniCS/basix"
          path: "basix"
          ref: ${{ steps.refs.outputs.BASIX_REF }}
      - uses: actions/checkout@v3
        with:
          repository: "FEniCS/ufl"
          path: "ufl"
          ref: ${{ steps.refs.outputs.UFL_REF }}
      - uses: actions/checkout@v3
        with:
          repository: "FEniCS/ffcx"
          path: "ffcx"
          ref: ${{ steps.refs.outputs.FFCX_REF }}
      - name: Set default FFCx parameters
        run: |
          echo '{ }' > dolfinx/docker/ffcx_parameters.json
      - name: Set default DOLFINx JIT parameters
        run: |
          echo '{ "cffi_extra_compile_args" : ["-O2"] } ' > dolfinx/docker/dolfinx_jit_parameters.json
      - name: Build dolfinx/dolfinx-onbuild
        run: |
          docker buildx build --file dolfinx/docker/Dockerfile ${DOCKER_BUILD_ARGS} \
            --target dolfinx-onbuild --cache-from=type=registry,ref=dolfinx/dev-env:${{ steps.tag_name.outputs.TAG_PREFIX }}-${ARCH_TAG} \
            --tag dolfinx/dolfinx-onbuild .
      - name: Build intermediate
        run: |
          docker buildx build --file dolfinx/docker/Dockerfile ${DOCKER_BUILD_ARGS} \
            --target intermediate --tag intermediate .
      - name: Build dolfinx/dolfinx
        run: |
          docker buildx build --file dolfinx/docker/Dockerfile ${DOCKER_BUILD_ARGS} \
            --target dolfinx --tag dolfinx/dolfinx .
      - name: Build dolfinx/lab
        run: |
          docker buildx build --file dolfinx/docker/Dockerfile ${DOCKER_BUILD_ARGS} \
            --target lab --tag dolfinx/lab .
      - name: Run basic tests inside container
        run: |
          docker run --rm dolfinx/dolfinx \
            python3 -c "import dolfinx; from dolfinx.fem import FunctionSpace; from dolfinx.mesh import create_unit_square; from mpi4py import MPI; mesh = create_unit_square(MPI.COMM_WORLD, 10, 10); V = FunctionSpace(mesh, ('Lagrange', 1));"
          docker run --rm dolfinx/dolfinx \
            /bin/bash -c "source /usr/local/bin/dolfinx-complex-mode && python3 -c $'import dolfinx; from dolfinx.fem import FunctionSpace; from dolfinx.mesh import create_unit_square; from mpi4py import MPI; mesh = create_unit_square(MPI.COMM_WORLD, 10, 10); V = FunctionSpace(mesh, (\"Lagrange\", 1));'"
      - name: Log into the DockerHub registry
        run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Push to the DockerHub registry
        run: |
          docker tag dolfinx/dolfinx-onbuild dolfinx/dolfinx-onbuild:${{ steps.tag_name.outputs.TAG_PREFIX }}-${ARCH_TAG}
          docker push dolfinx/dolfinx-onbuild:${{ steps.tag_name.outputs.TAG_PREFIX }}-${ARCH_TAG}
          docker tag dolfinx/dolfinx dolfinx/dolfinx:${{ steps.tag_name.outputs.TAG_PREFIX }}-${ARCH_TAG}
          docker push dolfinx/dolfinx:${{ steps.tag_name.outputs.TAG_PREFIX }}-${ARCH_TAG}
          docker tag dolfinx/lab dolfinx/lab:${{ steps.tag_name.outputs.TAG_PREFIX }}-${ARCH_TAG}
          docker push dolfinx/lab:${{ steps.tag_name.outputs.TAG_PREFIX }}-${ARCH_TAG}

  push_end_user_multiarch_images:
    name: Push end-user multiarch image
    if: ${{ github.repository == 'FEniCS/dolfinx' }}
    runs-on: ubuntu-latest
    needs:
      - build_end_user_images
    steps:
      - name: Get tag name
        id: tag_name
        run: |
          USER_INPUT=${{ github.event.inputs.tag_prefix }}
          echo "::set-output name=TAG_PREFIX::${USER_INPUT:-latest}"
      - name: Log into the DockerHub registry
        run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Push multiarch images
        run: |
          docker buildx imagetools create \
            -t dolfinx/dolfinx-onbuild:${{ steps.tag_name.outputs.TAG_PREFIX }} \
            dolfinx/dolfinx-onbuild:${{ steps.tag_name.outputs.TAG_PREFIX }}-amd64 \
            dolfinx/dolfinx-onbuild:${{ steps.tag_name.outputs.TAG_PREFIX }}-arm64
          docker buildx imagetools create \
            -t dolfinx/dolfinx:${{ steps.tag_name.outputs.TAG_PREFIX }} \
            dolfinx/dolfinx:${{ steps.tag_name.outputs.TAG_PREFIX }}-amd64 \
            dolfinx/dolfinx:${{ steps.tag_name.outputs.TAG_PREFIX }}-arm64
          docker buildx imagetools create \
            -t dolfinx/lab:${{ steps.tag_name.outputs.TAG_PREFIX }} \
            dolfinx/lab:${{ steps.tag_name.outputs.TAG_PREFIX }}-amd64 \
            dolfinx/lab:${{ steps.tag_name.outputs.TAG_PREFIX }}-arm64

  stop-runner:
    name: Stop self-hosted EC2 runner
    # Stop the runner even if an error happened in the previous jobs
    if: ${{ always() && github.repository == 'FEniCS/dolfinx' }}
    needs:
      - start_runner # required to get output from the start-runner job
      - push_end_user_multiarch_images # required to wait when the main job is done
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Stop EC2 runner
        uses: jhale/ec2-github-runner@main
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start_runner.outputs.label }}
          ec2-instance-id: ${{ needs.start_runner.outputs.ec2-instance-id }}
