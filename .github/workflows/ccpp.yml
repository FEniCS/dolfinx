name: DOLFINx CI

on:
  push:
    branches:
      - "**"
    tags:
      - "v*"
  pull_request:
    branches:
      - main

jobs:
  build:
    if: "!(contains(github.event.head_commit.message, '[ci skip]') || contains(github.event.head_commit.message, '[skip ci]'))"
    runs-on: ubuntu-20.04
    container: fenicsproject/test-env:latest-openmpi

    env:
      CC: clang
      CXX: clang++

      PETSC_ARCH: linux-gnu-${{ matrix.petsc_arch }}-${{ matrix.petsc_int_type }}
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      OMPI_MCA_rmaps_base_oversubscribe: 1
      OMPI_MCA_plm: isolated
      OMPI_MCA_btl_vader_single_copy_mechanism: none
      OMPI_MCA_mpi_yield_when_idle: 1
      OMPI_MCA_hwloc_base_binding_policy: none

    strategy:
      matrix:
        petsc_arch: [real, complex]
        petsc_int_type: [32, 64]

    steps:
      - uses: actions/checkout@v2

      - name: Install FEniCS Python components
        run: |
          python3 -m pip install git+https://github.com/FEniCS/ufl.git
          python3 -m pip install git+https://github.com/FEniCS/basix.git
          python3 -m pip install git+https://github.com/FEniCS/ffcx.git
      - name: Flake8 checks
        run: |
          cd python/
          python3 -m flake8 dolfinx
          python3 -m flake8 demo
          python3 -m flake8 test
      - name: isort checks (non-blocking)
        continue-on-error: true
        run: |
          cd python/
          python3 -m isort --check dolfinx
          python3 -m isort --check demo
          python3 -m isort --check test
      - name: clang-format C++ checks (non-blocking)
        continue-on-error: true
        run: |
          cd cpp
          find . -type f \( -name "*.cpp" -o -name "*.h" \) ! -name "pugixml.cpp" ! -name "loguru.cpp" | xargs clang-format --dry-run --Werror
      - name: clang-format Python binding checks (non-blocking)
        continue-on-error: true
        run: |
          cd python/dolfinx/wrappers
          find . -type f \( -name "*.cpp" -o -name "*.h" \) | xargs clang-format --dry-run --Werror

      - name: Configure C++
        run: cmake -G Ninja -DCMAKE_BUILD_TYPE=Developer -B build -S cpp/

      - name: Build and install C++ library
        run: |
          cmake --build build
          cmake --install build

      - name: Build C++ interface documentation
        run: |
          export DOLFINX_VERSION=`cmake -L build | grep DOXYGEN_DOLFINX_VERSION | cut -f2 -d "="`
          echo $DOLFINX_VERSION
          cd cpp/doc
          doxygen

      - name: Build C++ unit tests
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Developer -B build/test/unit/ -S build/test/unit/
          cmake --build build/test/unit
      - name: Run C++ unit tests (serial)
        run: |
          cd build/test/unit
          ctest -V --output-on-failure -R unittests
      - name: Run C++ unit tests (MPI)
        run: |
          cd build/test/unit
          mpiexec -np 2 ctest -V --output-on-failure -R unittests
      - name: Build and run C++ regression tests (serial and MPI (np=2))
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Developer -B build/demo/ -S build/demo/
          cmake --build build/demo
          cd build/demo
          ctest -V -R demo -R serial
          ctest -V -R demo -R mpi_2

      - name: Build Python interface
        run: python3 -m pip -v install --global-option build --global-option --debug python/
      - name: Build Python interface documentation
        run: |
          python3 -m pip install jupytext myst-parser
          cd python/doc && make html

      - name: Set default DOLFINx JIT parameters
        run: |
          mkdir -p ~/.config/dolfinx
          echo '{ "cffi_extra_compile_args": ["-g0", "-O0" ] }' > ~/.config/dolfinx/dolfinx_jit_parameters.json

      - name: Run demos (Python, serial)
        run: python3 -m pytest -n=2 -m serial --durations=10 python/demo/test.py
      - name: Run demos (Python, MPI (np=2))
        run: python3 -m pytest -m mpi --num-proc=2 python/demo/test.py

      - name: Run Python unit tests (serial)
        run: python3 -m pytest -n=auto --durations=50 python/test/unit/
      - name: Run Python unit tests (MPI, np=2)
        run: mpirun -np 2 python3 -m pytest python/test/unit/

      - name: Upload C++ documentation artifact
        uses: actions/upload-artifact@v2
        with:
          name: doc-cpp-${{ matrix.petsc_arch }}-${{ matrix.petsc_int_type }}
          path: |
            cpp/doc/html/
          retention-days: 2
          if-no-files-found: error

      - name: Upload Python documentation artifact
        uses: actions/upload-artifact@v2
        with:
          name: doc-python-${{ matrix.petsc_arch }}-${{ matrix.petsc_int_type }}
          path: |
            python/doc/build/html/
          retention-days: 2
          if-no-files-found: error

      - name: Checkout FEniCS/docs
        if: ${{ github.repository == 'FEniCS/dolfinx' && ( github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') ) && runner.os == 'Linux' }}
        uses: actions/checkout@v2
        with:
          repository: "FEniCS/docs"
          path: "docs"
          ssh-key: "${{ secrets.SSH_GITHUB_DOCS_PRIVATE_KEY }}"
      - name: Set version name
        if: ${{ github.repository == 'FEniCS/dolfinx' && ( github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') ) && runner.os == 'Linux' }}
        run: |
          echo "VERSION_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Copy documentation into repository
        if: ${{ github.repository == 'FEniCS/dolfinx' && ( github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') ) && runner.os == 'Linux' }}
        run: |
          cd docs
          git rm -r --ignore-unmatch dolfinx/${{ env.VERSION_NAME }}/cpp
          git rm -r --ignore-unmatch dolfinx/${{ env.VERSION_NAME }}/python
          mkdir -p dolfinx/${{ env.VERSION_NAME }}/cpp
          mkdir -p dolfinx/${{ env.VERSION_NAME }}/python
          cp -r ../cpp/doc/html/* dolfinx/${{ env.VERSION_NAME }}/cpp
          cp -r ../python/doc/build/html/* dolfinx/${{ env.VERSION_NAME }}/python
      - name: Commit and push documentation to FEniCS/docs
        if: ${{ github.repository == 'FEniCS/dolfinx' && ( github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') ) && runner.os == 'Linux' && matrix.petsc_arch == 'real' && matrix.petsc_int_type == '32' }}
        run: |
          cd docs
          git config --global user.email "fenics@github.com"
          git config --global user.name "FEniCS GitHub Actions"
          git add --all
          git commit --allow-empty -m "C++ FEniCS/dolfinx@${{ github.sha }}"
          git push
