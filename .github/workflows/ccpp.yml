name: DOLFINX CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - master

jobs:
  build:
    if: "!(contains(github.event.head_commit.message, '[ci skip]') || contains(github.event.head_commit.message, '[skip ci]'))"
    runs-on: ubuntu-20.04
    container: fenicsproject/test-env:openmpi

    env:
      CC: clang-10
      CXX: clang++-10
      MPLBACKEND: agg
      PETSC_ARCH: linux-gnu-${{ matrix.petsc_arch }}-${{ matrix.petsc_int_type }}
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      OMPI_MCA_rmaps_base_oversubscribe: 1
      OMPI_MCA_plm: isolated
      OMPI_MCA_btl_vader_single_copy_mechanism: none
      OMPI_MCA_mpi_yield_when_idle: 1
      OMPI_MCA_hwloc_base_binding_policy: none

    strategy:
      matrix:
        petsc_arch: [real, complex]
        petsc_int_type: [32, 64]

    steps:
      - uses: actions/checkout@v2

      - name: Install FEniCS Python components
        run: |
          python3 -m pip install git+https://github.com/FEniCS/basix.git
          python3 -m pip install git+https://github.com/FEniCS/ufl.git
          python3 -m pip install git+https://github.com/FEniCS/ffcx.git

      - name: Flake8 checks
        run: |
          cd python/
          python3 -m flake8 dolfinx
          python3 -m flake8 dolfinx_utils
          python3 -m flake8 demo
          python3 -m flake8 test

      - name: Build C++ interface documentation
        run: cd cpp/doc && doxygen

      - name: Configure C++
        run: cmake -G Ninja -DCMAKE_BUILD_TYPE=Developer -B build -S cpp/
      - name: Build and install C++ library
        run: |
          cmake --build build
          cmake --install build

      - name: Build and run C++ unit tests (serial and MPI)
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Developer -B build/test/unit/ -S build/test/unit/
          cmake --build build/test/unit
          cd build/test/unit
          ctest --output-on-failure -R unittests
          mpiexec -np 2 ctest --output-on-failure -R unittests
      - name: Build and run C++ regression tests (serial and MPI (np=2))
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Developer -B build/demo/ -S build/demo/
          cmake --build build/demo
          cd build/demo
          ctest -R demo -R serial
          ctest -R demo -R mpi_2

      - name: Build Python interface
        run: python3 -m pip -v install --global-option build --global-option --debug python/
      - name: Build Python interface documentation
        run: |
          cd python/demo && python3 ./generate-demo-files.py
          cd ../doc && make html

      - name: Set default DOLFINX JIT parameters
        run: |
          mkdir -p ~/.config/dolfinx
          echo '{ "cffi_extra_compile_args": ["-g0", "-O0" ] }' > ~/.config/dolfinx/dolfinx_jit_parameters.json

      - name: Run demos (Python, serial)
        run: python3 -m pytest -v -n=2 -m serial --durations=10 python/demo/test.py
      - name: Run demos (Python, MPI (np=2))
        run: python3 -m pytest -v -m mpi --num-proc=2 python/demo/test.py

      - name: Install sympy
        run: python3 -m pip install sympy
      - name: Run Python unit tests (serial)
        run: python3 -m pytest -v -n=auto --durations=50 python/test/unit/
      - name: Run Python unit tests (MPI, np=2)
        run: mpirun -np 2 python3 -m pytest python/test/unit/

      - name: Upload C++ documentation artifact
        uses: actions/upload-artifact@v2
        with:
          name: doc-cpp-${{ matrix.petsc_arch }}-${{ matrix.petsc_int_type }}
          path: |
            cpp/doc/html/
          retention-days: 2
          if-no-files-found: error

      - name: Upload Python documentation artifact
        uses: actions/upload-artifact@v2
        with:
          name: doc-python-${{ matrix.petsc_arch }}-${{ matrix.petsc_int_type }}
          path: |
            python/doc/build/html/
          retention-days: 2
          if-no-files-found: error

      - name: Checkout FEniCS/docs
        uses: actions/checkout@v2
        with:
          repository: "FEniCS/docs"
          path: "docs"
          ssh-key: "${{ secrets.SSH_GITHUB_DOCS_PRIVATE_KEY }}"
      - name: Push documentation to repository FEniCS/docs
        if: ${{ github.repository == 'FEniCS/dolfinx' && github.ref == 'refs/heads/master' && matrix.petsc_arch == 'real' && matrix.petsc_int_type == 32}}
        run: |
          cd docs
          git config --global user.email "fenics@github.com"
          git config --global user.name "FEniCS GitHub Actions"
          git rm -r dolfinx/master/cpp/*
          git rm -r dolfinx/master/python/*
          mkdir -p dolfinx/master/cpp
          mkdir -p dolfinx/master/python
          cp -r ../cpp/doc/html/* dolfinx/master/cpp
          cp -r ../python/doc/build/html/* dolfinx/master/python
          git add --all
          git commit --allow-empty -m "C++ and Python FEniCS/dolfinx@${{ github.sha }}"
          git push
