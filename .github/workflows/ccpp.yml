name: DOLFINX CI

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    # container: wells/dolfinx-dev-env:latest
    container: wells/dolfinx-dev-env:openmpi

    env:
      CC: clang-9
      CXX: clang++-9
      DOLFINX_JIT_CFLAGS: -g0 -O0
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      OMPI_MCA_rmaps_base_oversubscribe: 1
      OMPI_MCA_plm: isolated
      OMPI_MCA_btl_vader_single_copy_mechanism: none
      OMPI_MCA_mpi_yield_when_idle: 1
      OMPI_MCA_hwloc_base_binding_policy: none
      OMP_NUM_THREADS: 1
      OPENBLAS_NUM_THREADS: 1
      FENICS_CACHE_DIR: .

    steps:
      - uses: actions/checkout@v2
      - name: Install FEniCS Python components
        run: |
          apt-get -qq update
          apt-get -qq upgrade
          apt-get -y install clang-9 python3-pip
          pip3 install git+https://github.com/FEniCS/fiat.git --upgrade
          pip3 install git+https://github.com/FEniCS/ufl.git --upgrade
          pip3 install git+https://github.com/FEniCS/ffcx.git@garth/cache-test --upgrade
          rm -rf /usr/local/include/dolfin /usr/local/include/dolfin.h
      - name: Install pybind11
        run: |
          git clone -b master --single-branch https://github.com/pybind/pybind11.git
          cd pybind11
          mkdir build
          cd build
          cmake -DPYBIND11_TEST=False ../
          make install

      - name: Configure DOLFINX C++ with CMake
        run: |
          mkdir build
          cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Developer ../cpp/
      - name: Build DOLFINX C++
        run: |
          cd build
          ninja -j4 install

      - name: Build and run C++ unit tests
        run: |
          cd build
          ninja unittests
          ctest --output-on-failure -R unittests
          mpiexec -np 2 ctest --output-on-failure -R unittests
      - name: Build and run C++ regression tests (serial)
        run: |
          cd build
          ninja demos
          ./demo/poisson/demo_poisson
          ./demo/hyperelasticity/demo_hyperelasticity
          # ctest -R demo -R serial
      - name: Build and run C++ regression tests (MPI)
        run: |
          cd build
          ninja demos
          mpirun -np 3 ./demo/poisson/demo_poisson
          mpirun -np 3 ./demo/hyperelasticity/demo_hyperelasticity
          # ctest -R demo -R mpi

      - name: Build Python interface
        run: |
          cd python
          pip3 -v install . --user

      - name: Run unit tests (Python, serial)
        run: |
          mkdir -p ~/junit
          cd python/test/unit
          python3 -m pytest -s -n=3 --durations=50 --junitxml=~/junit/test-results.xml .
      - name: Run unit tests (Python, MPI)
        run: |
          cd python/test/unit
          mpirun -np 3 python3 -m pytest -s .
      # - name: Run demos (Python, serial)
      #   run: |
      #     mkdir -p ~/junit
      #     cd python/demo
      #     python3 ./generate-demo-files.py
      #     python3 -m pytest -n=3 -v -m serial --durations=10 --junitxml=~/junit/demo-results.xml test.py
      # - name: Run demos (Python, MPI)
      #   run: |
      #     cd python/demo
      #     python3 ./generate-demo-files.py
      #     python3 -m pytest -v -m mpi test.py --num-proc=3
