name: DOLFINX CI tests

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    container: fenicsproject/test-env

    env:
      CC: clang-10
      CXX: clang++-10
      DOLFINX_JIT_CFLAGS: -g0 -O0
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      OMPI_MCA_rmaps_base_oversubscribe: 1
      OMPI_MCA_plm: isolated
      OMPI_MCA_btl_vader_single_copy_mechanism: none
      OMPI_MCA_mpi_yield_when_idle: 1
      OMPI_MCA_hwloc_base_binding_policy: none
      # OMP_NUM_THREADS: 1
      # OPENBLAS_NUM_THREADS: 1
      # FENICS_CACHE_DIR: .
      MPLBACKEND: agg
      PETSC_DIR: /usr/local/petsc
      SLEPC_DIR: /usr/local/slepc
      PYTHONPATH: /usr/local/petsc/python:$PYTHONPATH

    strategy:
      matrix:
        float_type: [real]

    steps:
      - uses: actions/checkout@v2
      - name: Install FEniCS Python components
        run: |
          pip3 install git+https://github.com/FEniCS/fiat.git
          pip3 install git+https://github.com/FEniCS/ufl.git
          pip3 install git+https://github.com/FEniCS/ffcx.git
      - name: Install pybind11 (development branch)
        run: |
          git clone --depth=1 -b master https://github.com/pybind/pybind11.git
          cd pybind11
          mkdir build
          cd build
          cmake -DPYBIND11_TEST=False ../
          make install

      - name: Flake8 checks
        run: |
          python3 -m flake8 python/dolfinx
          python3 -m flake8 python/dolfinx_utils
          python3 -m flake8 python/demo
          python3 -m flake8 python/test
      - name: Build C++ documentation
        run: |
          cd cpp/doc
          doxygen

      - name: Configure C++
        run: |
          mkdir build
          cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Developer ../cpp/
      - name: Build C++
        run: |
          cd build
          ninja install

      - name: Build and run C++ unit tests (serial and MPI)
        run: |
          cd build
          ninja unittests
          ctest --output-on-failure -R unittests
          mpiexec -np 2 ctest --output-on-failure -R unittests
      - name: Build and run C++ regression tests (serial)
        run: |
          cd build
          ninja demos
          ctest -R demo -R serial
      - name: Build and run C++ regression tests (MPI, 2)
        run: |
          cd build
          ninja demos
          ctest -R demo -R mpi_2

      - name: Build Python interface
        run: |
          cd python
          pip3 -v install .
      - name: Build Python docs interface
        run: |
          cd python/demo && python3 ./generate-demo-files.py
          cd ../doc && make html

      - name: Run demos (Python, serial)
        run: python3 -m pytest -n=3 -v -m serial --durations=10 python/demo/test.py
      - name: Run demos (Python, MPI (np=2))
        run: python3 -m pytest -v -m mpi --num-proc=2 python/demo/test.py
      - name: Run demos (Python, MPI (np=3))
        run: python3 -m pytest -v -m mpi --num-proc=3 python/demo/test.py

      - name: Run Python unit tests (serial)
        run: python3 -m pytest -n=2 -vs --durations=50 python/test/unit/
      - name: Run Python unit tests (MPI, np=2)
        run: mpirun -np 2 python3 -m pytest python/test/unit/
      - name: Run Python unit tests (MPI, np=3)
        run: mpirun -np 3 python3 -m pytest python/test/unit/

      - name: Push C++ documentation
        if: github.ref == 'master'
        run: |
          cd cpp/doc
          # Upload to server
      # - name: Push Python documentation
      #     if: github.ref == 'master'
      #     run: |
      #     cd python/doc
      # Upload to server
