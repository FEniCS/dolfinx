---
name: MacOS build

on:
  schedule:
    # '*' is a special character in YAML, so string must be quoted
    - cron: "0 4 * * WED"
  workflow_dispatch: ~

jobs:
  mac-os-build:
    name: MacOS Homebrew install and test
    strategy:
      matrix:
        os: [macos-12, macos-11]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      # Some of these dependencies (e.g. python@3.10) are already installed in the GH action
      # runner but included here for completeness
      - name: Install Homebrew dependencies
        run: |
          brew install boost cmake hdf5-mpi ninja open-mpi pkg-config pugixml python@3.10 xtensor # FEniCS
          brew install bison flex # PETSc
          brew list --versions
      
      # This 'activates' Python 3.10 from Homebrew
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install minimal PETSc
        run: |
          curl -L -O http://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-lite-3.17.3.tar.gz
          mkdir petsc
          tar -xf petsc-lite-3.17.3.tar.gz -C petsc --strip-components=1
          cd petsc
          python ./configure \
          --with-64-bit-indices=no \
          --with-debugging=no \
          --with-fortran-bindings=no \
          --with-scalar-type=real \
          --with-shared-libraries \
          --with-scalar-type=real \
          --with-make-np=3 \
          --download-metis \
          --download-ptscotch
          make all

      - name: Create virtualenv
        run: |
          python -m venv create fenicsx
          source fenicsx/bin/activate
          python -m pip install --upgrade setuptools
          python -m pip install --upgrade pip
          echo "VIRTUAL ENV:" $VIRTUAL_ENV
          echo '$(which python):' $(which python)

      - name: Install Basix
        run: |
          source fenicsx/bin/activate
          python -m pip install git+https://github.com/FEniCS/basix.git

      - name: Install UFL
        run: |
          source fenicsx/bin/activate
          python -m pip install git+https://github.com/FEniCS/ufl.git

      - name: Install FFCx
        run: |
          source fenicsx/bin/activate
          python -m pip install git+https://github.com/FEniCS/ffcx.git

      - uses: actions/checkout@v3
        with:
          path: dolfinx
          ref: main

      - name: Build and install DOLFINx C++ library
        run: |
          source fenicsx/bin/activate
          cd dolfinx
          PETSC_DIR=$GITHUB_WORKSPACE/petsc PETSC_ARCH=arch-darwin-c-opt \
          cmake -G Ninja -DPython3_EXECUTABLE=$(which python) -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/fenicsx -B build -S cpp/
          cmake --build build
          cmake --install build

      - name: Build and install DOLFINx Python interface
        run: |
          source fenicsx/bin/activate
          cd dolfinx
          PETSC_DIR=$GITHUB_WORKSPACE/petsc PETSC_ARCH=arch-darwin-c-opt \
          python -m pip -v install python/

      - name: Basic test
        run: |
          source fenicsx/bin/activate
          python -c "import dolfinx; from mpi4py import MPI; dolfinx.mesh.create_rectangle(comm=MPI.COMM_WORLD, points=((0, 0), (2, 1)), n=(32, 16))"
          mpirun -np 2 python -c "import dolfinx; from mpi4py import MPI; dolfinx.mesh.create_rectangle(comm=MPI.COMM_WORLD, points=((0, 0), (2, 1)), n=(32, 16))"
