---
name: macOS build

on:
  schedule:
    # '*' is a special character in YAML, so string must be quoted
    - cron: "0 4 * * WED"
  workflow_dispatch:

jobs:
  mac-os-build:
    name: macOS Homebrew install and test
    strategy:
      matrix:
        os: [macos-13]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      # Some of these dependencies (e.g. python@3.10) are already
      # installed in the GH action runner but included here for
      # completeness
      - name: Install Homebrew dependencies
        run: |
          # brew install adios2 boost cmake hdf5-mpi ninja open-mpi pkg-config pugixml # FEniCS
          brew install boost cmake hdf5-mpi ninja open-mpi pkg-config pugixml # FEniCS
          brew install bison flex # PETSc
          brew install python

      # # This 'activates' Python 3.10 from Homebrew
      # - name: Setup Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: "3.11"

      - name: Install Python dependencies
        run: |
          pip install pip --upgrade
          pip install numpy setuptools wheel
          pip install Cython==0.29.32

      - name: Install mpi4py
        run: |
          pip -v install --no-build-isolation --no-deps --no-cache git+https://github.com/mpi4py/mpi4py.git
          python -c "import mpi4py, os, sys; sys.stdout.write(os.path.dirname(mpi4py.__file__))"
          # cat /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/mpi4py/MPI_api.h

      # bison > 3 required. Could not get PETSc to find keg-only
      # Homebrew bison. Instead let PETSc build bison.
      - name: Install minimal PETSc
        run: |
          python -c "import cython; print(cython.__version__)"
          export PATH="$(brew --prefix bison)/bin:$PATH"
          export PETSC_ARCH=arch-darwin-c-opt
          which python
          which pip
          git clone -b main https://gitlab.com/garth-wells/petsc.git petsc
          cd petsc
          ./configure \
            --with-64-bit-indices=no \
            --with-debugging=no \
            --with-fortran-bindings=no \
            --with-scalar-type=real \
            --with-shared-libraries \
            --with-scalar-type=real \
            --download-ptscotch
          make all
            # --with-petsc4py \
          # export PYTHONPATH=/Users/runner/work/dolfinx/dolfinx/petsc/arch-darwin-c-opt/lib:$PYTHONPATH
          # # python -c "import petsc4py, os, sys; sys.stdout.write(os.path.dirname(petsc4py.__file__))"
          # cat /Users/runner/work/dolfinx/dolfinx/petsc/arch-darwin-c-opt/lib/petsc4py/PETSc_api.h
          # # cat /Users/runner/work/dolfinx/dolfinx/petsc/arch-darwin-c-opt/lib/petsc4py/PETSc.h

      - name: Install petsc4py
        run: |
          export PETSC_ARCH=arch-darwin-c-opt
          export PETSC_DIR=$GITHUB_WORKSPACE/petsc
          # cd petsc/src/binding/petsc4py
          # pip install wheel
          # pip list
          # which python
          # pip --debug install --platform --no-cache-dir --no-build-isolation --no-deps -v .
          pip install --no-build-isolation  --no-cache-dir --no-deps -v petsc/src/binding/petsc4py

      # - name: Install petsc4py
      #   run: |
      #     uname -a
      #     echo $ARCHFLAGS
      #     mpicc -show
      #     export PETSC_ARCH=arch-darwin-c-opt
      #     export PETSC_DIR=$GITHUB_WORKSPACE/petsc
      #     cd petsc/src/binding/petsc4py
      #     pip install wheel
      #     pip list
      #     which python
      #     # pip --debug install --platform --no-cache-dir --no-build-isolation --no-deps -v .
      #     pip --debug install --platform --no-cache-dir --no-deps -v .

      - name: Install FEniCSx dependencies
        run: |
          pip install git+https://github.com/FEniCS/basix.git
          pip install git+https://github.com/FEniCS/ufl.git
          pip install git+https://github.com/FEniCS/ffcx.git

      - uses: actions/checkout@v3
        with:
          path: dolfinx

      - name: Build and install DOLFINx C++ library
        run: |
          # export PYTHONPATH=/Users/runner/work/dolfinx/dolfinx/petsc/arch-darwin-c-opt/lib:$PYTHONPATH
          export PETSC_DIR=$GITHUB_WORKSPACE/petsc
          export PETSC_ARCH=arch-darwin-c-opt
          cmake -G Ninja -B build -S dolfinx/cpp/
          cmake --build build
          cmake --install build

      - name: Build and install DOLFINx Python interface
        run: |
          # export PYTHONPATH=/Users/runner/work/dolfinx/dolfinx/petsc/arch-darwin-c-opt/lib:$PYTHONPATH
          export PETSC_DIR=$GITHUB_WORKSPACE/petsc
          export PETSC_ARCH=arch-darwin-c-opt
          pip -v install --no-build-isolation --no-cache dolfinx/python/

      - name: Basic test
        run: |
          # export PYTHONPATH=/Users/runner/work/dolfinx/dolfinx/petsc/arch-darwin-c-opt/lib:$PYTHONPATH
          python -c "import dolfinx; from mpi4py import MPI; dolfinx.mesh.create_rectangle(comm=MPI.COMM_WORLD, points=((0, 0), (2, 1)), n=(32, 16))"
          mpirun -np 2 python -c "import dolfinx; from mpi4py import MPI; dolfinx.mesh.create_rectangle(comm=MPI.COMM_WORLD, points=((0, 0), (2, 1)), n=(32, 16))"
