name: Spack build

on:
  # Uncomment the below 'push' to trigger on push
  push:
   branches:
     - "**"
  schedule:
    # '*' is a special character in YAML, so string must be quoted
    - cron: "0 2 * * THU"
  workflow_dispatch:
    inputs:
      dolfinx_version:
        description: "DOLFINx release branch/tag to test"
        default: "0.9.0"
        type: string

env:
  GITHUB_USER: ${{ github.actor }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


jobs:
  build:
    runs-on: ubuntu-latest
    container: ubuntu:24.04

    env:
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      PRTE_MCA_rmaps_default_mapping_policy: :oversubscribe   # Newer OpenMPI
      OMPI_MCA_rmaps_base_oversubscribe: true                 # Older OpenMPI

      DOLFINX_RELEASE_VERSION: "${{ github.event_name != 'workflow_dispatch' && '0.9.0' || github.event.inputs.dolfinx_version }}"

    steps:
      - name: Install Spack requirements
        run: |
          apt-get -y update
          apt-get install -y bzip2 curl file git gzip make patch python3-minimal tar unzip xz-utils
          apt-get install -y g++ gfortran  # compilers

      - uses: actions/checkout@v4

      - name: Set up Spack
        uses: spack/setup-spack@main
        with:
          ref: develop      # Spack version (examples: develop, releases/v0.23)
          buildcache: true  # Configure oci://ghcr.io/spack/github-actions-buildcache
          color: true       # Force color output (SPACK_COLOR=always)
          path: spack-src       # Where to clone Spack

      - name: Build DOLFINx (C++) development version via Spack
        shell: spack-bash {0}
        run: |
          spack env create cpp-main .github/workflows/spack-config/gh-actions-env.yaml
          spack -e cpp-main install -j 4 --add fenics-dolfinx@main+petsc+adios2

      - name: Get DOLFINx code (to access test files)
        uses: actions/checkout@v4
        with:
          path: ./dolfinx-main
      - name: Run a C++ test (development version)
        shell: spack-bash {0}
        run: |
          spack env create cpp-main-test .github/workflows/spack-config/gh-actions-env.yaml
          spack -e cpp-main-test install -j 4 --add fenics-dolfinx@main+petsc+adios2 cmake py-fenics-ffcx@main
          cd dolfinx-main/cpp/
          cd demo/poisson
          cmake .
          export VERBOSE=1
          make -j 4
          mpirun -np 2 ./demo_poisson

        # spack env create cpp-main-test
        # spack env activate cpp-main-test
        # spack add fenics-dolfinx@main+petsc+adios2 cmake py-fenics-ffcx@main
        # spack install
        # cd dolfinx-main/cpp/
        # cd demo/poisson
        # cmake .
        # export VERBOSE=1
        # make -j 4
        # mpirun -np 2 ./demo_poisson

      # - name: Build DOLFINx (C++) release version via Spack
      #   shell: spack-bash {0}
      #   run: |
      #     spack env create . .github/workflows/spack-config/gh-actions-env.yaml
      #     spack -e . install -j 4 --add fenics-dolfinx@${DOLFINX_RELEASE_VERSION}+petsc+adios2

        # spack env create cpp-release
        # spack env activate cpp-release
        # spack add fenics-dolfinx@${DOLFINX_RELEASE_VERSION}+petsc+adios2
        # spack install
      # - name: Get DOLFINx release code (to access test files)
      #   uses: actions/checkout@v4
      #   with:
      #     ref:  v${{ env.DOLFINX_RELEASE_VERSION }}
      #     path: ./dolfinx-release
      # - name: Run a C++ test (release version)
      #   shell: spack-bash {0}
      #   run: |
      #     spack env create cpp-release-test
      #     spack env activate cpp-release-test
      #     spack add fenics-dolfinx@${DOLFINX_RELEASE_VERSION}+petsc+adios2 cmake py-fenics-ffcx
      #     spack install
      #     cd dolfinx-release/cpp/
      #     cd demo/poisson
      #     cmake .
      #     export VERBOSE=1
      #     make -j 4
      #     mpirun -np 2 ./demo_poisson

      # - name: Build DOLFINx (Python, development)
      #   shell: spack-bash {0}
      #   run: |
      #     spack env create py-main
      #     spack env activate py-main
      #     spack add py-fenics-dolfinx@main
      #     spack install
      # - name: Run DOLFINx (Python, development) test
      #   shell: spack-bash {0}
      #   run: |
      #     spack env activate py-main
      #     mpirun -np 2 python3 ./dolfinx-main/python/demo/demo_elasticity.py

      # - name: Build DOLFINx (Python, release version)
      #   shell: spack-bash {0}
      #   run: |
      #     spack env create py-release
      #     spack env activate py-release
      #     spack add py-fenics-dolfinx@${DOLFINX_RELEASE_VERSION}
      #     spack install -j 4
      # - name: Run DOLFINx (Python, release) test
      #   shell: spack-bash {0}
      #   run: |
      #     spack env activate py-release
      #     mpirun -np 2 python3 ./dolfinx-release/python/demo/demo_elasticity.py

      - name: Push packages and update index
        env:
          GITHUB_USER: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: spack -e . buildcache push --base-image ubuntu:24.04 --update-index local-buildcache
        if: ${{ !cancelled() }}
