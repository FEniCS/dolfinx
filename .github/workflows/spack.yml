name: Spack build

on:
  # Uncomment the below 'push' to trigger on push
  # push:
  #  branches:
  #    - "**"
  schedule:
    # '*' is a special character in YAML, so string must be quoted
    - cron: "0 2 * * THU"
  workflow_dispatch: ~

jobs:
  build:
    strategy:
      matrix:
        # os: [ubuntu-20.04, macos-10.15]
        os: [ubuntu-20.04]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    env:
      MPLBACKEND: agg
      OPENBLAS_NUM_THREADS: 1
      OMPI_MCA_rmaps_base_oversubscribe: 1
      OMPI_MCA_plm: isolated
      OMPI_MCA_btl_vader_single_copy_mechanism: none
      OMPI_MCA_mpi_yield_when_idle: 1
      OMPI_MCA_hwloc_base_binding_policy: none

    steps:

      - name: Get Spack
        uses: actions/checkout@v2
        with:
          path: ./spack
          repository: spack/spack

      # - name: Build DOLFINx (C++) development version via Spack
      #   run: |
      #     . ./spack/share/spack/setup-env.sh
      #     spack env create cpp-main
      #     spack env activate cpp-main
      #     spack add fenics-dolfinx@main
      #     spack install

      - name: Build DOLFINx (C++) release version via Spack
        run: |
          . ./spack/share/spack/setup-env.sh
          spack env create cpp-release
          spack env activate cpp-release
          spack add fenics-dolfinx
          spack install

      - name: Get DOLFINx code (to access test files)
        uses: actions/checkout@v2
        with:
          path: ./dolfinx-test

      - name: Create demo CMake files
        run: |
          . ./spack/share/spack/setup-env.sh
          spack env activate cpp-main
          cd dolfinx-test/cpp/
          python cmake/scripts/generate-cmakefiles.py

      # - name: Run a C++ test (development version) via Spack
      #   run: |
      #     . ./spack/share/spack/setup-env.sh
      #     spack env activate cpp-main
      #     cd dolfinx-test/cpp/demo/poisson
      #     ffcx poisson.ufl
      #     mkdir build-dir-main
      #     cd build-dir-main
      #     cmake ../
      #     export VERBOSE=1
      #     make -j2
      #     mpirun -np 2 ./demo_poisson

      - name: Run a C++ test (release version) via Spack
        run: |
          . ./spack/share/spack/setup-env.sh
          spack env activate cpp-release
          spack load cmake
          cd dolfinx-test/cpp/demo/poisson
          ffcx poisson.ufl
          mkdir build-dir-release
          cd build-dir-release
          cmake ../
          export VERBOSE=1
          make -j2
          mpirun -np 2 ./demo_poisson

      # - name: Build DOLFINx (Python, development) via Spack
      #   run: |
      #     . ./spack/share/spack/setup-env.sh
      #     spack env create py-main
      #     spack env activate py-main
      #     spack add py-fenics-dolfinx@main
      #     spack install

      - name: Build DOLFINx (Python, release version) via Spack
        run: |
          . ./spack/share/spack/setup-env.sh
          spack env create py-release
          spack env activate py-release
          spack add py-fenics-dolfinx
          spack install

      # NOTE: numba is installed via pip because the spack package takes
      # an extremely long time to compile
      - name: Run DOLFINx (Python, release) tests
        run: |
          . ./spack/share/spack/setup-env.sh
          spack env activate py-release
          pip install numba
          mpirun -np 2 python3 ./dolfinx-test/python/demo/stokes-taylor-hood/demo_stokes-taylor-hood.py
