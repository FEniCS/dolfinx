name: Red Hat clone

on:
  push:
    # Uncomment the below 'push' to trigger on push
    branches:
      - "**"
  pull_request:
    branches:
      - "main"
    tags:
      - "v*"
  merge_group:
    branches:
      - main
  workflow_dispatch:

env:
  GITHUB_USER: ${{ github.actor }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  OMPI_ALLOW_RUN_AS_ROOT: 1
  OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
  PRTE_MCA_rmaps_default_mapping_policy: :oversubscribe   # Newer OpenMPI
  OMPI_MCA_rmaps_base_oversubscribe: true                 # Older OpenMPI

  PATH: /usr/bin:$PATH


jobs:
  build:
    runs-on: ubuntu-latest
    container: rockylinux/rockylinux:10
    defaults:
          run:
            shell: sh

    name: Rocky build and test

    steps:

      - name: Install Spack requirements
        run: |
          dnf -y install epel-release
          dnf -y install bash file bzip2 ca-certificates git gzip patch python3 tar unzip xz zstd gcc gcc-c++ gcc-gfortran

      - name: Checkout Spack
        uses: actions/checkout@v4
        with:
          repository: spack/spack
          path: spack-src

      # - name: Check
      #   # shell: spack-bash {0}
      #   run: |
      #     pwd
      #     ls -al
      #     # ls -al ../
      #     # ls -al ../../
      #     # ls -al ~
      #     # ls -al $GITHUB_WORKSPACE

      - name: Get DOLFINx code (to access Spack config and test files)
        uses: actions/checkout@v4
        with:
          path: dolfinx-src

      - name: Check
        # shell: spack-bash {0}
        run: |
          pwd
          ls -al
          ls -al dolfinx-src
          ls -al $GITHUB_WORKSPACE
      # - name: Set up Spack
      #   uses: spack/setup-spack@main
      #   with:
      #     ref: develop      # Spack version (examples: develop, releases/v0.23)
      #     buildcache: false  # Enable buildcache support
      #     color: true       # Force color output (SPACK_COLOR=always)
      #     path: spack-src   # Where to clone Spack

      - name: Install dependencies
        run: |
          . ./spack-src/share/spack/setup-env.sh
          spack env create dolfinx dolfinx-src/.github/workflows/spack-config/gh-actions-env.yaml
          spack -e dolfinx add petsc+mpi+shared slepc parmetis pkgconfig python hdf5+mpi boost pugixml spdlog
          spack -e dolfinx add python py-nanonind py-numpy py-mpi4py py-petsc4py py-slepc4py py-scikit-build-core+pyproject py-setuptool py-cffi
          spack -e dolfinx install --use-buildcache=package:never,dependencies:auto

      # - name: Push packages and update index
      #   env:
      #     GITHUB_USER: ${{ github.actor }}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     . ../spack-src/share/spack/setup-env.sh
      #     spack -e dolfinx buildcache push --base-image ubuntu


      # - name: Load environment variables
      #   run: cat .github/workflows/fenicsx-refs.env >> $GITHUB_ENV

      # - name: Install FEniCS Python components
      #   shell: spack-bash {0}
      #   run: |
      #     . ../spack-src/share/spack/setup-env.sh
      #     spack env activate dolfinx
      #     pip install git+https://github.com/fenics/ufl.git@${{ env.ufl_ref }}
      #     pip install git+https://github.com/fenics/basix.git@${{ env.basix_ref }}
      #     pip install git+https://github.com/fenics/ffcx.git@${{ env.ffcx_ref }}

      # - name: Configure C++
      #   run: cmake -G Ninja -DCMAKE_BUILD_TYPE=Developer -B build -S cpp/
      # - name: Build and install C++ library
      #   run: |
      #     cmake --build build
      #     cmake --install build

      # - name: Build C++ unit tests
      #   run: |
      #     cmake -G Ninja -DCMAKE_BUILD_TYPE=Developer -B build/test/ -S cpp/test/
      #     cmake --build build/test
      # - name: Run C++ unit tests (serial)
      #   run: |
      #     cd build/test
      #     ctest -V --output-on-failure -R unittests
      # - name: Run C++ unit tests (MPI)
      #   run: |
      #     cd build/test
      #     mpiexec -np 2 ctest -V --output-on-failure -R unittests
      # - name: Build and run C++ regression tests (serial and MPI (np=2))
      #   run: |
      #     cmake -G Ninja -DCMAKE_BUILD_TYPE=Developer -B build/demo/ -S cpp/demo/
      #     cmake --build build/demo
      #     cd build/demo
      #     ctest -V -R demo -R serial
      #     ctest -V -R demo -R mpi_2

      # - name: Install Python dependencies
      #   run: |
      # - name: Build Python interface (editable install)
      #   run: |
      #     python3 -m pip install --upgrade -r python/build-requirements.txt
      #     python3 -m pip install --check-build-dependencies --no-build-isolation --config-settings=cmake.build-type=Debug --config-settings=build-dir="build" -e 'python/[test]'

      # - name: Set default DOLFINx JIT options
      #   run: |
      #     mkdir -p ~/.config/dolfinx
      #     echo '{ "cffi_extra_compile_args": ["-g0", "-O0" ] }' > ~/.config/dolfinx/dolfinx_jit_options.json

      # - name: Install pyvista and gmsh
      #   run: |
      #     dnf install -y mesa-libGLU libX11 libXrender mesa-libEGL libglvnd-glx libXcursor libXft libXinerama
      #     python3 -m pip install gmsh pyvista

      # - name: Run demos (Python, serial)
      #   run: |
      #     python3 -m pip install pytest-xdist
      #     python3 -m pytest -n auto -m serial --durations=10 python/demo/test.py
      # - name: Run demos (Python, MPI (np=2))
      #   run: python3 -m pytest -m mpi --num-proc=2 python/demo/test.py

      # - name: Run Python unit tests (serial)
      #   run: python3 -m pytest -n auto -m "not adios2" --durations=50 python/test/unit/
      # - name: Run Python unit tests (MPI, np=2)
      #   run: mpirun -np 2 python3 -m pytest -m "not adios2" python/test/unit/
