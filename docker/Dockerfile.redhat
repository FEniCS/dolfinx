# Dockerfile for testing DOLFINx in Red Hat-compatible distributions.
# Should be built using corresponding GitHub action activated through web
# interface.
#
# docker run -ti -v docker.io/fenicsproject/test-env:current-redhat
FROM rockylinux/rockylinux:9

ARG BUILD_NP=3

ARG HDF5_SERIES=1.14
ARG HDF5_PATCH=3
ARG HDF5_FIX=
ARG PETSC_VERSION=3.20.4
ARG MPICH_VERSION=4.1.2

WORKDIR /tmp

RUN dnf -y update && \
    dnf install -y dnf-plugins-core && \
    dnf config-manager --set-enabled crb && \
    dnf install -y epel-release && \
    dnf -y install \
    bison \
    boost-devel \
    boost-filesystem \
    boost-timer \
    boost-program-options \
    cmake \
    gcc \
    gcc-c++ \
    gcc-gfortran \
    pugixml-devel \
    python3 \
    python3-devel \
    python3-pip \
    # Required for PETSc build
    diffutils \
    findutils \
    flex \
    # Utility
    git \
    # Only in crb set
    ninja-build \
    openblas-devel && \
    dnf -y clean all && \
    rm -rf /var/cache

# Build MPICH (see https://github.com/pmodels/mpich/issues/5811)
RUN curl -L -O https://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz && \
    tar -xf mpich-${MPICH_VERSION}.tar.gz && \
    cd mpich-${MPICH_VERSION} && \
    FCFLAGS=-fallow-argument-mismatch FFLAGS=-fallow-argument-mismatch ./configure --with-device=ch4:ofi --enable-shared --prefix=/usr/local && \
    make -j${BUILD_NP} install && \
    rm -rf /tmp/*

# Build HDF5
RUN curl -L -O https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_SERIES}/hdf5-${HDF5_SERIES}.${HDF5_PATCH}/src/hdf5-${HDF5_SERIES}.${HDF5_PATCH}${HDF5_FIX}.tar.gz && \
    tar -xf hdf5-${HDF5_SERIES}.${HDF5_PATCH}${HDF5_FIX}.tar.gz && \
    cd hdf5-${HDF5_SERIES}.${HDF5_PATCH}${HDF5_FIX} && \
    ./configure --prefix=/usr/local --enable-parallel --enable-shared --enable-static=no && \
    make -j${BUILD_NP} install && \
    rm -rf /tmp/*

# Install Python packages (via pip)
# - make sure pip/setuptoools are up-to-date before using them
# - First set of dependencies for building and running Python DOLFINx
# - Second set of dependencies for running DOLFINx tests
RUN python3 -m pip install --no-cache-dir --upgrade pip setuptools && \
    python3 -m pip install --no-cache-dir cffi numba mpi4py nanobind scikit-build-core[pyproject] wheel && \
    python3 -m pip install --no-cache-dir pytest pytest-xdist scipy matplotlib

# Build PETSc
RUN git clone -b v${PETSC_VERSION}  https://gitlab.com/petsc/petsc.git && \
    cd petsc && \
    python3 ./configure \
    --with-shared-libraries \
    --with-fortran-bindings=no \
    --with-scalar-type=real \
    --with-64-bit-indices=yes \
    --with-debugging=yes \
    --download-ptscotch \
    --download-hypre \
    --download-metis \
    --download-mumps \
    --download-scalapack \
    --download-superlu_dist \
    --prefix=/usr/local \
    --with-make-np=${BUILD_NP} && \
    make all && \
    make install && \
    cd src/binding/petsc4py && \
    PETSC_DIR=/usr/local python3 -m pip install --no-cache-dir . && \
    rm -rf /tmp/*

ENV PETSC_DIR=/usr/local

# RHEL pkgconfig does not look here by default. Setting this probably
# better than forcing install into 'system path' or hacking in DOLFINx
# pkgconfig.py code.
ENV PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig
