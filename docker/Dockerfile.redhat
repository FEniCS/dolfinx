# Dockerfile for testing DOLFINx in Red Hat-compatible distributions.
# Should be built using corresponding GitHub action activated through web
# interface.
#
# docker run -ti -v docker.io/fenicsproject/test-env:current-redhat
FROM rockylinux/rockylinux:10

ARG BUILD_NP=4

ARG PETSC_VERSION=3.23.4
ARG SLEPC_VERSION=3.23.2

WORKDIR /tmp

RUN dnf -y update && \
    dnf install -y dnf-plugins-core && \
    dnf config-manager --set-enabled crb && \
    dnf install -y epel-release && \
    dnf -y install \
    bison \
    boost-devel \
    boost-program-options \
    cmake \
    gcc \
    gcc-c++ \
    gcc-gfortran \
    hdf5-mpich-devel \
    mpich-devel \
    pugixml-devel \
    python3 \
    python3-devel \
    python3-pip \
    spdlog-devel \
    diffutils \
    findutils \
    flex \
    git \
    ninja-build \
    openblas-devel && \
    dnf -y clean all && \
    rm -rf /var/cache

ENV PATH=/usr/lib64/mpich/bin:$PATH

# Broaden default minimal dynamic library path lookup to /usr/local/lib (PETSc
# issue #1154) and /usr/local/lib64
RUN echo "/usr/local/lib/" > /etc/ld.so.conf.d/usr-local-lib.conf && \
    echo "/usr/local/lib64" > /etc/ld.so.conf.d/usr-local-lib64.conf

# # Build MPICH (see https://github.com/pmodels/mpich/issues/5811)
# RUN curl -L -O https://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz && \
#     tar -xf mpich-${MPICH_VERSION}.tar.gz && \
#     cd mpich-${MPICH_VERSION} && \
#     FCFLAGS=-fallow-argument-mismatch FFLAGS=-fallow-argument-mismatch ./configure --with-device=ch4:ofi --enable-shared --prefix=/usr/local --libdir=/usr/local/lib64 && \
#     make -j${BUILD_NP} install && \
#     rm -rf /tmp/*

# # Build HDF5
# RUN curl -L -O https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5_${HDF5_VERSION}.tar.gz && \
#     tar -xf hdf5_${HDF5_VERSION}.tar.gz && \
#     cd hdf5-hdf5_${HDF5_VERSION} && \
#     ./configure --prefix=/usr/local --libdir=/usr/local/lib64 --enable-parallel --enable-shared --enable-static=no && \
#     make -j${BUILD_NP} install && \
#     rm -rf /tmp/*

RUN python3 -m pip -v install --no-cache-dir cython mpi4py numpy patchelf pyproject setuptools wheel

    # Build PETSc
RUN git clone --depth=1 -b v${PETSC_VERSION} https://gitlab.com/petsc/petsc.git && \
    cd petsc && \
    python3 ./configure \
    --with-shared-libraries \
    --with-fortran-bindings=no \
    --with-scalar-type=real \
    --with-64-bit-indices=yes \
    --with-debugging=yes \
    --download-ptscotch \
    --download-hypre \
    --download-metis \
    --download-mumps \
    --download-scalapack \
    --download-superlu_dist \
    --prefix=/usr/local/petsc \
    --with-make-np=${BUILD_NP} && \
    make all && \
    make install && \
    cd src/binding/petsc4py && \
    PETSC_DIR=/usr/local/petsc python3 -m pip -v install --no-cache-dir --no-build-isolation . && \
    rm -rf /tmp/* && \

ENV PETSC_DIR=/usr/local/petsc

# Install SLEPc
RUN git clone --depth=1 -b v${SLEPC_VERSION} https://gitlab.com/slepc/slepc.git && \
    cd slepc && \
    ./configure --prefix=/usr/local/slepc  && \
    make SLEPC_DIR=/tmp/slepc && \
    make SLEPC_DIR=/tmp/slepc install && \
    cd src/binding/slepc4py && \
    SLEPC_DIR=/usr/local/slepc python3 -m pip -v install --no-cache-dir --no-build-isolation . && \
    rm -rf /tmp/*

ENV SLEPC_DIR=/usr/local/slepc

# RHEL pkgconfig does not look here by default. Setting this probably
# better than forcing install into 'system path' or hacking in DOLFINx
# pkgconfig.py code.
# ENV PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig
