# Dockerfile for testing DOLFINx with oneAPI compilers and libraries.
# Should be built using corresponding GitHub action activated through web
# interface.

# docker run -ti -v docker.io/fenicsproject/test-env:current-oneapi
FROM ubuntu:22.04

ARG BUILD_NP=3

ARG ADIOS2_VERSION=2.9.2
ARG HDF5_SERIES=1.14
ARG HDF5_PATCH=3
ARG HDF5_FIX=
ARG PETSC_VERSION=3.21.0
ARG SLEPC_VERSION=3.21.0
ARG NANOBIND_VERSION=1.9.2
ARG KAHIP_VERSION=3.16

WORKDIR /tmp

# Install dependencies available via apt-get
RUN export DEBIAN_FRONTEND=noninteractive && \
    apt-get -qq update && \
    apt-get -yq --with-new-pkgs -o Dpkg::Options::="--force-confold" upgrade && \
    apt-get -y install \
    bzip2 \
    cmake \
    gnupg \
    libboost-dev \
    libboost-filesystem-dev \
    libboost-timer-dev \
    libpugixml-dev \
    ninja-build \
    pkg-config \
    catch2 \
    git \
    wget \
    zlib1g-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install oneAPI libraries (see https://oneapi-src.github.io/oneapi-ci/)
RUN wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null && \
    echo "deb [trusted=yes] https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/oneAPI.list && \
    apt-get update && \
    apt-get install -y libstdc++-11-dev intel-oneapi-compiler-dpcpp-cpp intel-oneapi-mkl-devel intel-oneapi-mpi-devel intel-oneapi-python && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    rm -rf /opt/intel/oneapi/debugger /opt/intel/oneapi/compiler/2023.2.0 /opt/intel/oneapi/mkl/latest/lib/intel64/*.a && \
    . /opt/intel/oneapi/setvars.sh && \
    conda clean -ay

ENV CC=icx \
    CXX=icpx \
    I_MPI_CC=icx \
    I_MPI_CXX=icpx

# Install Python packages (via pip)
RUN . /opt/intel/oneapi/setvars.sh && \
    pip install --no-cache-dir matplotlib mpi4py nanobind==${NANOBIND_VERSION} pytest pytest-xdist scikit-build-core[pyproject]

# Install KaHIP
RUN . /opt/intel/oneapi/setvars.sh && \
    wget -nc --quiet https://github.com/kahip/kahip/archive/v${KAHIP_VERSION}.tar.gz && \
    tar -xf v${KAHIP_VERSION}.tar.gz && \
    cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DNONATIVEOPTIMIZATIONS=on -B build-dir -S KaHIP-${KAHIP_VERSION} && \
    cmake --build build-dir && \
    cmake --install build-dir && \
    rm -rf /tmp/*

# Install HDF5
# Note: HDF5 CMake install has numerous bugs and inconsistencies. Test carefully.
# HDF5 overrides CMAKE_INSTALL_PREFIX by default, hence it is set
# below to ensure that HDF5 is installed into a path where it can be
# found.
RUN . /opt/intel/oneapi/setvars.sh && \
    wget -nc --quiet https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_SERIES}/hdf5-${HDF5_SERIES}.${HDF5_PATCH}/src/hdf5-${HDF5_SERIES}.${HDF5_PATCH}${HDF5_FIX}.tar.gz && \
    tar xfz hdf5-${HDF5_SERIES}.${HDF5_PATCH}${HDF5_FIX}.tar.gz && \
    cmake -G Ninja -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=Release -DHDF5_ENABLE_PARALLEL=on -DHDF5_ENABLE_Z_LIB_SUPPORT=on -B build-dir -S hdf5-${HDF5_SERIES}.${HDF5_PATCH}${HDF5_FIX} && \
    cmake --build build-dir && \
    cmake --install build-dir && \
    rm -rf /tmp/*

# Install ADIOS2
RUN . /opt/intel/oneapi/setvars.sh && \
    wget -nc --quiet https://github.com/ornladios/ADIOS2/archive/v${ADIOS2_VERSION}.tar.gz -O adios2-v${ADIOS2_VERSION}.tar.gz && \
    mkdir -p adios2-v${ADIOS2_VERSION} && \
    tar -xf adios2-v${ADIOS2_VERSION}.tar.gz -C adios2-v${ADIOS2_VERSION} --strip-components 1 && \
    cmake -G Ninja -DADIOS2_USE_HDF5=on -DADIOS2_USE_Fortran=off -DBUILD_TESTING=off -DADIOS2_BUILD_EXAMPLES=off -DADIOS2_USE_ZeroMQ=off -B build-dir -S ./adios2-v${ADIOS2_VERSION} && \
    cmake --build build-dir && \
    cmake --install build-dir && \
    rm -rf /tmp/*

# Install PETSc and petsc4py with real and complex types
ENV PETSC_DIR=/usr/local/petsc SLEPC_DIR=/usr/local/slepc
RUN . /opt/intel/oneapi/setvars.sh && \
    apt-get -qq update && \
    apt-get -y install bison flex && \
    git clone -b v${PETSC_VERSION}  https://gitlab.com/petsc/petsc.git ${PETSC_DIR} && \
    cd ${PETSC_DIR} && \
    # Real32, 32-bit int
    ./configure \
    PETSC_ARCH=linux-gnu-real32-32 \
    --with-64-bit-indices=no \
    --with-fortran-bindings=no \
    --with-shared-libraries \
    --download-superlu_dist \
    --with-make-np=${BUILD_NP} \
    --with-scalar-type=real \
    --with-precision=single \
    --download-ptscotch && \
    make PETSC_ARCH=linux-gnu-real32-32 ${MAKEFLAGS} all && \
    # Complex64, 32-bit int
    ./configure \
    PETSC_ARCH=linux-gnu-complex64-32 \
    --with-64-bit-indices=no \
    --with-fortran-bindings=no \
    --with-shared-libraries \
    --download-superlu_dist \
    --with-make-np=${BUILD_NP} \
    --with-scalar-type=complex \
    --with-precision=single \
    --download-ptscotch && \
    make PETSC_ARCH=linux-gnu-complex64-32 ${MAKEFLAGS} all && \
    # Real64, 32-bit int
    ./configure \
    PETSC_ARCH=linux-gnu-real64-32 \
    --with-64-bit-indices=no \
    --with-fortran-bindings=no \
    --with-shared-libraries \
    --download-superlu_dist \
    --with-make-np=${BUILD_NP} \
    --with-scalar-type=real \
    --download-ptscotch && \
    make PETSC_ARCH=linux-gnu-real64-32 ${MAKEFLAGS} all && \
    # Complex128, 32-bit int
    ./configure \
    PETSC_ARCH=linux-gnu-complex128-32 \
    --with-64-bit-indices=no \
    --with-fortran-bindings=no \
    --with-shared-libraries \
    --download-superlu_dist \
    --with-make-np=${BUILD_NP} \
    --with-scalar-type=complex \
    --download-ptscotch && \
    make PETSC_ARCH=linux-gnu-complex128-32 ${MAKEFLAGS} all && \
    # Install petsc4py
    cd src/binding/petsc4py && \
    PETSC_ARCH=linux-gnu-real32-32:linux-gnu-complex64-32:linux-gnu-real64-32:linux-gnu-complex128-32 pip install --no-cache-dir . && \
    # Cleanup
    apt-get -y purge bison flex && \
    apt-get -y autoremove && \
    apt-get clean && \
    rm -rf \
    ${PETSC_DIR}/**/tests/ \
    ${PETSC_DIR}/**/obj/ \
    ${PETSC_DIR}/**/externalpackages/  \
    ${PETSC_DIR}/CTAGS \
    ${PETSC_DIR}/RDict.log \
    ${PETSC_DIR}/TAGS \
    ${PETSC_DIR}/docs/ \
    ${PETSC_DIR}/share/ \
    ${PETSC_DIR}/src/ \
    ${PETSC_DIR}/systems/ \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install SLEPc
RUN . /opt/intel/oneapi/setvars.sh && \
    git clone -b v${SLEPC_VERSION} https://gitlab.com/slepc/slepc.git ${SLEPC_DIR} && \
    cd ${SLEPC_DIR} && \
    export PETSC_ARCH=linux-gnu-real32-32 && \
    ./configure && \
    make && \
    export PETSC_ARCH=linux-gnu-complex64-32 && \
    ./configure && \
    make && \
    export PETSC_ARCH=linux-gnu-real64-32 && \
    ./configure && \
    make && \
    export PETSC_ARCH=linux-gnu-complex128-32 && \
    ./configure && \
    make && \
    # Install slepc4py
    cd src/binding/slepc4py && \
    PETSC_ARCH=linux-gnu-real32-32:linux-gnu-complex64-32:linux-gnu-real64-32:linux-gnu-complex128-32 pip install --no-cache-dir . && \
    rm -rf ${SLEPC_DIR}/CTAGS ${SLEPC_DIR}/TAGS ${SLEPC_DIR}/docs ${SLEPC_DIR}/src/ ${SLEPC_DIR}/**/obj/ ${SLEPC_DIR}/**/test/ && \
    rm -rf /tmp/*
