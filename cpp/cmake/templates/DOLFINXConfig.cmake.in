# - Build details for DOLFINx: Dynamic Object-oriented Library for
# - FINite element computation
#
# This file has been automatically generated.

# FIXME: Check that naming conforms to CMake standards

@PACKAGE_INIT@
include(CMakeFindDependencyMacro)

find_dependency(MPI REQUIRED)
find_dependency(pugixml)

# Check for Boost
if(DEFINED ENV{BOOST_ROOT} OR DEFINED BOOST_ROOT)
  set(Boost_NO_SYSTEM_PATHS on)
endif()
set(Boost_USE_MULTITHREADED $ENV{BOOST_USE_MULTITHREADED})
set(Boost_VERBOSE TRUE)
find_dependency(Boost 1.70 REQUIRED COMPONENTS timer filesystem)

# xtensor
find_dependency(xtl)
find_dependency(xtensor)

if (@ufcx_FOUND@)
  find_dependency(ufcx)
endif()

# Basix
find_package(Python3 COMPONENTS Interpreter)
if(Python3_Interpreter_FOUND)
  execute_process(
    COMMAND ${Python3_EXECUTABLE} -c "import basix, os, sys; sys.stdout.write(os.path.dirname(basix.__file__))"
    OUTPUT_VARIABLE BASIX_PY_DIR
    RESULT_VARIABLE BASIX_PY_COMMAND_RESULT
    ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)
endif()
if (BASIX_PY_DIR)
  message(STATUS "Adding ${BASIX_PY_DIR} to Basix search hints")
endif()
find_dependency(Basix CONFIG HINTS ${BASIX_PY_DIR})

# Add xsimd if the C++ interface was compiled with it
if(@xsimd_FOUND@)
  find_dependency(xsimd)
endif()

# HDF5
if (NOT TARGET hdf5::hdf5)
  set(HDF5_PREFER_PARALLEL TRUE)
  set(HDF5_FIND_DEBUG TRUE)
  find_dependency(HDF5 COMPONENTS C)
  if (HDF5_FOUND AND NOT HDF5_IS_PARALLEL)
    message(FATAL_ERROR "Found serial HDF5 build, MPI HDF5 build required")
  endif()
endif()

set(PETSC_SCALAR_COMPLEX @HAVE_PETSC_SCALAR_COMPLEX@)
if (NOT TARGET PkgConfig::PETSC)
  find_package(PkgConfig REQUIRED)
  set(ENV{PKG_CONFIG_PATH} "$ENV{PETSC_DIR}/$ENV{PETSC_ARCH}/lib/pkgconfig:$ENV{PETSC_DIR}/lib/pkgconfig:$ENV{PKG_CONFIG_PATH}")
  pkg_search_module(PETSC REQUIRED IMPORTED_TARGET PETSc petsc)
endif()

if (@SLEPC_FOUND@)
  if (NOT TARGET PkgConfig::SLEPC)
     find_package(PkgConfig REQUIRED)
     set(ENV{PKG_CONFIG_PATH} "$ENV{SLEPC_DIR}/$ENV{PETSC_ARCH}/lib/pkgconfig:$ENV{SLEPC_DIR}/lib/pkgconfig:$ENV{PKG_CONFIG_PATH}")
     set(ENV{PKG_CONFIG_PATH} "$ENV{PETSC_DIR}/$ENV{PETSC_ARCH}/lib/pkgconfig:$ENV{PETSC_DIR}/lib/pkgconfig:$ENV{PKG_CONFIG_PATH}")
     set(ENV{PKG_CONFIG_PATH} "$ENV{PETSC_DIR}/$ENV{PETSC_ARCH}:$ENV{PETSC_DIR}:$ENV{PKG_CONFIG_PATH}")
     pkg_search_module(SLEPC REQUIRED IMPORTED_TARGET SLEPc slepc)
  endif()
endif()

if (NOT TARGET dolfinx)
  include("${CMAKE_CURRENT_LIST_DIR}/DOLFINXTargets.cmake")
endif()

check_required_components(DOLFINX)
