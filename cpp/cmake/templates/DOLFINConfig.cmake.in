# - Build details for DOLFIN: Dynamic Object-oriented Library for
# - FINite element computation
#
# This file has been automatically generated.

# FIXME: Check that naming conforms to CMake standards

@PACKAGE_INIT@

#if (POLICY CMP0011)
#  cmake_policy(SET CMP0011 NEW)
#endif()

#if (POLICY CMP0012)
#  cmake_policy(SET CMP0012 NEW)
#endif()

# Compute path
#get_filename_component(DOLFIN_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)

# Library dependencies (contains definitions for IMPORTED targets)
# NOTE: DOLFIN demo CMakeLists.txt are written to be stand-alone, as
# well as the build system building the demo. Therefore, we need the
# below guard to avoid exporting the targets twice.
if (NOT TARGET dolfin)
#  include("${DOLFIN_CMAKE_DIR}/DOLFINTargets.cmake")
  include("${CMAKE_CURRENT_LIST_DIR}/DOLFINTargets.cmake")
endif()

# Compilers
#set(DOLFIN_CXX_COMPILER "@CMAKE_CXX_COMPILER@")

# Compiler definitions
#set(DOLFIN_CXX_DEFINITIONS "-DDOLFIN_VERSION=\"@DOLFIN_VERSION@\";@DOLFIN_CXX_DEFINITIONS@")

# Compiler flags
#set(DOLFIN_CXX_FLAGS "@CMAKE_CXX_FLAGS@")

# Linker flags
#set(DOLFIN_LINK_FLAGS "@CMAKE_EXE_LINKER_FLAGS@")

# Include directories
set(DOLFIN_INCLUDE_DIRS "@CMAKE_INSTALL_PREFIX@/@DOLFIN_INCLUDE_DIR@")

# Find MPI
find_package(MPI REQUIRED)

# Check for Boost
set(BOOST_ROOT $ENV{BOOST_DIR} $ENV{BOOST_HOME})
if (BOOST_ROOT)
set(Boost_NO_SYSTEM_PATHS on)
endif()

# Prevent FindBoost.cmake from looking for system Boost{foo}.cmake files
set(Boost_NO_BOOST_CMAKE true)

set(Boost_USE_MULTITHREADED $ENV{BOOST_USE_MULTITHREADED})
find_package(Boost 1.56 QUIET REQUIRED COMPONENTS
@DOLFIN_BOOST_COMPONENTS_PUBLIC@)

if (NOT PETSC::petsc)
set(DOLFIN_SKIP_BUILD_TESTS TRUE)
list(APPEND CMAKE_MODULE_PATH "@CMAKE_INSTALL_PREFIX@/@DOLFIN_SHARE_DIR@/cmake")
find_package(PETSc REQUIRED QUIET)
endif()

if (@SLEPC_FOUND@)
if (NOT SLEPC::slepc)
    set(DOLFIN_SKIP_BUILD_TESTS TRUE)
    find_package(SLEPc REQUIRED QUIET)
endif()
endif()
